{
    "Description": "This template deploys a simple VPC for egress testing",
    "Metadata": {
        "AWS::CloudFormation::Interface" : {
            "ParameterGroups" : [
                {
                "Parameters" : [ "BIGIPType","ExistingKeyPairName" ]
                }
            ]
        }
    },
    "Parameters": {
        "BIGIPType": {
            "Type": "String",
            "Description": "PAYG requires acceptance of terms and subscription. https://aws.amazon.com/marketplace/server/procurement?productId=0d09bfd3-90c5-4b9c-98a2-c3860dbfcd9e",
            "Default": "Pay-As-You-Go",
            "AllowedValues": [
              "Pay-As-You-Go",
              "Bring-Your-Own-License"
            ]
        },
        "ExistingKeyPairName": {
          "Description": "Select an existing EC2 key pair to enable SSH access to the instance.",
          "Type": "AWS::EC2::KeyPair::KeyName",
          "AllowedPattern": "[a-zA-Z0-9-_~!@#$%^&*()\\+]+$",
          "ConstraintDescription": "You must select an existing EC2 key pair.",
          "Default": "Teller"
        }
    },
    "Conditions": {
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.10.0.0/16",
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "VPC"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "IGW"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "ElasticIPNatGW": {
            "Type" : "AWS::EC2::EIP",
            "Properties" : {
                "Domain" : "vpc"
            }
        },
        "ElasticIPBigIP02": {
            "Type" : "AWS::EC2::EIP",
            "Properties" : {
                "Domain" : "vpc"
            }
        },
        "AssociateElasticIPBigIP02" : {
            "Type" : "AWS::EC2::EIPAssociation",
            "Properties" : {
                "AllocationId" : { "Fn::GetAtt" : [ "ElasticIPBigIP02", "AllocationId" ]},
                "NetworkInterfaceId" : { "Ref" : "ENAPublicBigIP02" }
            }
        },
        "NatGateway": {
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId" : { "Fn::GetAtt" : ["ElasticIPNatGW", "AllocationId"]},
                "SubnetId" : { "Ref" : "PublicSubnet02AzA"},
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "NGW"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "InternetGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "PublicRouteTable"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "PublicRouteDefault": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "InternetGatewayAttachment",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSubnet01AzA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.10.1.0/24",
                "MapPublicIpOnLaunch": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "PublicSubnet01-AZ-A"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "PublicSubnet02AzA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.10.2.0/24",
                "MapPublicIpOnLaunch": false,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "PublicSubnet02-AZ-A"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "PrivateSubnet01AzA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.10.3.0/24",
                "MapPublicIpOnLaunch": false,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "PrivateSubnet01-AZ-A"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "PublicSubnet01AzARouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet01AzA"
                }
            }
        },
        "PublicSubnet02AzARouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet02AzA"
                }
            }
        },
        "PrivateRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "PrivateRouteTable"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "PrivateRouteDefault": {
            "Type": "AWS::EC2::Route",
            "DependsOn" : "NatGateway",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NatGateway"
                }
            }
        },
        "PrivateSubnet01AzARouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet01AzA"
                }
            }
        },
        "SSHSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "SecurityGroupIngress": [
                {
                    "IpProtocol": "6",
                    "FromPort" : 22,
                    "ToPort" : 22,
                    "CidrIp": "0.0.0.0/0",
                    "Description": "Allow SSH to JumpHost"
                }],
                "GroupDescription": "Allowed access to JumpHost",
                "VpcId": {
                  "Ref": "VPC"
                }
            }
        },
        "SecurityGroupSSH": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "SecurityGroupIngress": [
                {
                    "IpProtocol": "6",
                    "FromPort" : 22,
                    "ToPort" : 22,
                    "CidrIp": "0.0.0.0/0",
                    "Description": "Allow SSH"
                }],
                "GroupDescription": "Allowed SSH access",
                "VpcId": {
                  "Ref": "VPC"
              },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "SG",
                                    "SSH"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Environment",
                        "Value": "bigip-k8s-nginx"
                    }
                ]
            }
        },
        "SecurityGroupHTTPS": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "SecurityGroupIngress": [
                {
                    "IpProtocol": "6",
                    "FromPort" : 443,
                    "ToPort" : 443,
                    "CidrIp": "0.0.0.0/0",
                    "Description": "Allow HTTPs"
                }],
                "GroupDescription": "Allowed HTTPs access",
                "VpcId": {
                  "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "SG",
                                    "HTTPs"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Environment",
                        "Value": "bigip-k8s-nginx"
                    }
                ]
            }
        },
        "SecurityGroupPrivate": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "SecurityGroupIngress": [
                {
                    "IpProtocol": "-1",
                    "CidrIp": "10.10.0.0/16",
                    "Description": "Allow all traffic in private network"
                }],
                "GroupDescription": "Allow all traffic in private network",
                "VpcId": {
                  "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "SG",
                                    "Private"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Environment",
                        "Value": "bigip-k8s-nginx"
                    }
                ]
            }
        },
        "ENAPublicJumpHost01":{
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "SourceDestCheck": false,
                "Description": "Public Interface for Jump Host",
                "GroupSet": [
                    {
                        "Ref": "SecurityGroupSSH"
                    }
                ],
                "PrivateIpAddress": "10.10.1.10",
                "SubnetId": {
                    "Ref": "PublicSubnet01AzA"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "JumpHost",
                                    "PublicENA",
                                    "01"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "ENAPrivateJumpHost01":{
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "SourceDestCheck": false,
                "Description": "Private Interface for Jump Host",
                "GroupSet": [
                    {
                        "Ref": "SSHSecurityGroup"
                    }
                ],
                "PrivateIpAddress": "10.10.3.10",
                "SubnetId": {
                    "Ref": "PrivateSubnet01AzA"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "JumpHost",
                                    "PrivateENA",
                                    "01"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "ENAPublicBigIP01":{
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "SourceDestCheck": false,
                "Description": "Mgmt Interface for BigIP",
                "GroupSet": [
                    {
                        "Ref": "SecurityGroupSSH"
                    },
                    {
                        "Ref": "SecurityGroupHTTPS"
                    }
                ],
                "PrivateIpAddress": "10.10.1.50",
                "SubnetId": {
                    "Ref": "PublicSubnet01AzA"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "BigIP",
                                    "PublicENA",
                                    "01"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "ENAPublicBigIP02":{
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "SourceDestCheck": false,
                "Description": "External Interface for BigIP",
                "GroupSet": [
                    {
                        "Ref": "SSHSecurityGroup"
                    }
                ],
                "PrivateIpAddresses": [
                    {"PrivateIpAddress": "10.10.2.50", "Primary": true},
                    {"PrivateIpAddress": "10.10.2.51", "Primary": false},
                    {"PrivateIpAddress": "10.10.2.52", "Primary": false}
                ],
                "SubnetId": {
                    "Ref": "PublicSubnet02AzA"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "BigIP",
                                    "PublicENA",
                                    "02"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "ENAPrivateBigIP01":{
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "SourceDestCheck": false,
                "Description": "Internal Interface for BigIP",
                "GroupSet": [
                    {
                        "Ref": "SecurityGroupPrivate"
                    }
                ],
                "PrivateIpAddresses": [
                    {"PrivateIpAddress": "10.10.3.50", "Primary": true},
                    {"PrivateIpAddress": "10.10.3.51", "Primary": false},
                    {"PrivateIpAddress": "10.10.3.52", "Primary": false}
                ],
                "SubnetId": {
                    "Ref": "PrivateSubnet01AzA"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "BigIP",
                                    "PrivateENA",
                                    "01"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "EC2JumpHost": {
            "Type" : "AWS::EC2::Instance",
            "Properties": {
                "KeyName": {
                  "Ref": "ExistingKeyPairName"
                },
                "IamInstanceProfile" : {"Ref" : "InstanceProfile"},
                "NetworkInterfaces": [
                     {
                        "Description": "Public Interface",
                        "DeviceIndex": "0",
                        "NetworkInterfaceId":
                        {
                            "Ref": "ENAPublicJumpHost01"
                        }
                    }
                ],
                "InstanceType": "t3.medium",
                "ImageId": {
                  "Fn::FindInMap": [
                    "Ubuntu1804",
                    {
                      "Ref": "AWS::Region"
                    },
                    "AMI"
                  ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "JumpHost"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Environment",
                        "Value": "bigip-k8s-nginx"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "\n## Install required applications\n",
                                "sudo apt-get update\n",
                                "sudo apt-get install jq -y\n",
                                "sudo apt-get install awscli -y\n",
                                "\n### Install kops\n",
                                "curl -Lo kops https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | jq -r .tag_name )/kops-linux-amd64\n",
                                "\n### Install kubectl\n",
                                "curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\n",
                                "\n### Move kubectl and kops binary\n",
                                "chmod +x ./kubectl ./kops\n",
                                "sudo mv ./kubectl ./kops /usr/local/bin/\n",
                                "\n### Start configuration based on environment\n",
                                { "Fn::Sub": [ "export KOPS_NAME=${StackName}.k8s.local\n", { "StackName": {"Ref" : "AWS::StackName" }} ]},
                                "echo export KOPS_NAME=$KOPS_NAME >> /etc/profile.d/88-all-profiles.sh\n",
                                { "Fn::Sub": [ "export KOPS_STATE_STORE=s3://${BucketName}\n", { "BucketName": {"Ref": "S3BucketKOPS"} }]},
                                "echo export KOPS_STATE_STORE=$KOPS_STATE_STORE >> /etc/profile.d/88-all-profiles.sh\n",
                                { "Fn::Sub": [ "export KOPS_VPC_ID=${vpcID}\n", { "vpcID": {"Ref": "VPC"} }]},
                                { "Fn::Sub": [ "export KOPS_SUBNET_ID=${SubnetID}\n", { "SubnetID": {"Ref": "PrivateSubnet01AzA"} }]},
                                { "Fn::Sub": [ "export KOPS_AVAIL_ZONES=${AZ}\n", { "AZ": {"Fn::GetAtt" : [ "PrivateSubnet01AzA" , "AvailabilityZone" ]} }]},
                                { "Fn::Sub": [ "export KOPS_SECURITY_GROUP=${SG}\n", {"SG": {"Ref" : "SecurityGroupPrivate"} }]},
                                "sudo -u ubuntu mkdir /home/ubuntu/bigip-nginx-k8s\n",
                                "sudo -u ubuntu git clone https://github.com/r-teller/bigip-nginx-k8s.git /home/ubuntu/bigip-nginx-k8s\n",
                                "sudo -u ubuntu kops create cluster \\\n\t
                                    --state=${KOPS_STATE_STORE} \\\n\t
                                    --cloud=aws \\\n\t
                                    --vpc=${KOPS_VPC_ID} \\\n\t
                                    --master-zones=${KOPS_AVAIL_ZONES} \\\n\t
                                    --master-security-groups=${KOPS_SECURITY_GROUP} \\\n\t
                                    --zones=${KOPS_AVAIL_ZONES} \\\n\t
                                    --subnets=${KOPS_SUBNET_ID} \\\n\t
                                    --utility-subnets=${KOPS_SUBNET_ID} \\\n\t
                                    --node-count=1 \\\n\t
                                    --topology=private \\\n\t
                                    --api-loadbalancer-type=internal \\\n\t
                                    --networking=kopeio-vxlan \\\n\t
                                    --node-size=t3.medium \\\n\t
                                    --node-security-groups=${KOPS_SECURITY_GROUP} \\\n\t
                                    --master-size=t3.medium \\\n\t
                                    --ssh-public-key=/home/ubuntu/.ssh/authorized_keys \\\n\t
                                    --name=${KOPS_NAME} --yes\n\n",
                                "\n### Store BIG-IP Creds as k8s secret\n",
                                { "Fn::Sub": [ "kubectl create secret generic bigip-login --namespace bigip-ingress --from-literal=username=BigIPk8s --from-literal=password=${BigIPk8s_PWD}\n", { "BigIPk8s_PWD": {"Ref": "EC2BigIPPAYG"} }]}
                            ]
                        ]
                    }
                }
            }
        },
        "S3BucketKOPS":{
            "Type" : "AWS::S3::Bucket",
            "Properties": {
                "BucketName" : {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "kops-state"
                        ]
                    ]
                }
            }
        },
        "InstanceProfile" : {
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" : {
                "Path" : "/",
                "Roles" : [{"Ref": "IAMRoleKOPS"}]
            }
        },
        "IAMRoleKOPS" : {
          "Type" : "AWS::IAM::Role",
          "Properties" : {
              "RoleName" : {
                  "Fn::Join": [
                      "-",
                      [
                          {
                              "Ref": "AWS::StackName"
                          },
                          "kops-iam-role"
                      ]
                  ]
              },
              "Path" : "/",
              "ManagedPolicyArns" : [
                  "arn:aws:iam::aws:policy/AmazonEC2FullAccess",
                  "arn:aws:iam::aws:policy/AmazonRoute53FullAccess",
                  "arn:aws:iam::aws:policy/AmazonS3FullAccess",
                  "arn:aws:iam::aws:policy/AmazonVPCFullAccess",
                  "arn:aws:iam::aws:policy/IAMFullAccess"
              ],
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "ec2.amazonaws.com"
                        },
                        "Action": "sts:AssumeRole"
                    }]
                },
            }
        },
        "EC2BigIPPAYG": {
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/tmp/firstrun.utils": {
                                "group":  "root",
                                "mode":  "000755",
                                "owner":  "root",
                                "source":  "http://cdn.f5.com/product/templates/utils/firstrun.utils"
                            },
                            "/tmp/bigip_utils.sh": {
                                "group":  "root",
                                "mode":  "000755",
                                "owner":  "root",
                                "source":  "https://raw.githubusercontent.com/r-teller/bigip-nginx-k8s/master/1_scripts/shell/bigip_utils.sh"
                            },
                            "/tmp/firstrun.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            ". /tmp/firstrun.utils\n",
                                            "FILE=/tmp/firstrun.log\n",
                                            "if [ ! -e $FILE ]\n",
                                            " then\n",
                                            "     touch $FILE\n",
                                            "     nohup $0 0<&- &>/dev/null &\n",
                                            "     exit\n",
                                            "fi\n",
                                            "exec 1<&-\n",
                                            "exec 2<&-\n",
                                            "exec 1<>$FILE\n",
                                            "exec 2>&1\n",
                                            "date\n",
                                            "checkStatusnoret\n",
                                            "export Instance_ID=`curl http://169.254.169.254/latest/meta-data/instance-id`\n",
                                            "echo 'starting tmsh config'\n",
                                            "tmsh modify sys global-settings gui-setup disabled\n",
                                            "tmsh modify sys httpd auth-pam-validate-ip off\n",
                                            "tmsh modify auth password-policy policy-enforcement disabled\n",
                                            "tmsh modify auth user admin password ${Instance_ID}\n",
                                            "tmsh create auth user BigIPk8s partition-access add { all-partitions { role admin }} password ${Instance_ID}\n",
                                            "tmsh save /sys config\n",
                                            "date\n",
                                            "echo 'provisioning required modules'\n",
                                            "tmsh modify sys provision avr asm level nominal\n",
                                            "tmsh save /sys config\n",
                                            "checkStatusnoret\n",
                                            "echo 'configure self-ip'\n",
                                            "for mac in `curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/` \n
                                                do \n
                                                    device_number=`curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/${mac:0:-1}/device-number` \n
                                                    case $device_number in \n
                                                    0) \n
                                                        ;; \n
                                                    1) \n
                                                        dev1_cdr=`curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/${mac:0:-1}/subnet-ipv4-cidr-block` \n
                                                        dev1_pfx=${dev1_cdr#*/} \n
                                                        dev1_int=`tmsh list net interface one-line | grep -i ${mac:0:-1} | awk '{print $3}'` \n
                                                        ;; \n
                                                    2) \n
                                                        dev2_cdr=`curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/${mac:0:-1}/subnet-ipv4-cidr-block` \n
                                                        dev2_pfx=${dev2_cdr#*/} \n
                                                        dev2_int=`tmsh list net interface one-line | grep -i ${mac:0:-1} | awk '{print $3}'` \n
                                                        ;;\n
                                                    esac \n
                                                done\n",
                                            "tmsh create net vlan external interfaces add { ${dev1_int} { untagged} }\n",
                                            "tmsh create net vlan internal interfaces add { ${dev2_int} { untagged} }\n",
                                            { "Fn::Sub": [ "tmsh create net self ${Self_IP}", { "Self_IP": { "Fn::Select" : [1, {"Fn::GetAtt" : [ "ENAPublicBigIP02" , "SecondaryPrivateIpAddresses" ]} ] } }]}, "/${dev1_pfx}  vlan external allow-service none traffic-group traffic-group-local-only\n",
                                            { "Fn::Sub": [ "tmsh create net self ${Self_IP}", { "Self_IP": { "Fn::Select" : [0, {"Fn::GetAtt" : [ "ENAPublicBigIP02" , "SecondaryPrivateIpAddresses" ]} ] } }]}, "/${dev1_pfx}  vlan external allow-service none traffic-group traffic-group-1\n",
                                            { "Fn::Sub": [ "tmsh create net self ${Self_IP}", { "Self_IP": { "Fn::Select" : [1, {"Fn::GetAtt" : [ "ENAPrivateBigIP01" , "SecondaryPrivateIpAddresses" ]} ] } }]}, "/${dev2_pfx}  vlan internal allow-service default traffic-group traffic-group-local-only\n",
                                            { "Fn::Sub": [ "tmsh create net self ${Self_IP}", { "Self_IP": { "Fn::Select" : [0, {"Fn::GetAtt" : [ "ENAPrivateBigIP01" , "SecondaryPrivateIpAddresses" ]} ] } }]}, "/${dev2_pfx}  vlan internal allow-service default traffic-group traffic-group-1\n",
                                            "date\n",
                                            "echo 'create virtual-servers'\n",
                                            { "Fn::Sub": [ "tmsh create ltm virtual k8s_vip_https destination ${Destination_IP}:443  profiles add { http {} clientssl { context clientside } } vlans add { external } source-address-translation { type automap }\n", { "Destination_IP": {"Fn::GetAtt" : [ "ENAPublicBigIP02" , "PrimaryPrivateIpAddress" ]} }]},
                                            "date\n",
                                            "# typically want to remove firstrun.config after first boot\n",
                                            "# rm /tmp/firstrun.config\n"
                                        ]
                                    ]
                                },
                                "group":  "root",
                                "mode":  "000755",
                                "owner":  "root"
                            }
                        },
                        "commands": {
                            "b-configure-Bigip": {
                                "command":  "/tmp/firstrun.sh\n "
                            }
                        }
                    }
                }
            },
            "Type" : "AWS::EC2::Instance",
            "Properties": {
                "KeyName": {
                  "Ref": "ExistingKeyPairName"
                },
                "NetworkInterfaces": [
                     {
                        "Description": "Public Interface",
                        "DeviceIndex": "0",
                        "NetworkInterfaceId":
                        {
                            "Ref": "ENAPublicBigIP01"
                        }
                    }
                ],
                "InstanceType": "t2.large",
                "ImageId": {
                  "Fn::FindInMap": [
                    "BigIPPAYG200Mb",
                    {
                      "Ref": "AWS::Region"
                    },
                    "AMI"
                  ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "BigIP"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Environment",
                        "Value": "bigip-k8s-nginx"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                { "Fn::Sub": [ "export STACK_ID=${stackID}\n", { "stackID": {"Ref": "AWS::StackId"} }]},
                                { "Fn::Sub": [ "export Region=${region}\n", { "region": {"Ref": "AWS::Region"} }]},
                                "/opt/aws/apitools/cfn-init/bin/cfn-init -v \\\n\t
                                -s ${STACK_ID} \\\n\t
                                -r EC2BigIPPAYG \\\n\t
                                --region ${Region} \n"
                            ]
                        ]
                    }
                }
            }
        },
        "AttachENAPublicBigIP02": {
            "Type" : "AWS::EC2::NetworkInterfaceAttachment",
                "Properties" : {
                    "InstanceId" : {"Ref" : "EC2BigIPPAYG"},
                    "NetworkInterfaceId" : {"Ref" : "ENAPublicBigIP02"},
                    "DeviceIndex" : "1"
                }
        },
        "AttachENAPrivateBigIP01": {
            "Type" : "AWS::EC2::NetworkInterfaceAttachment",
                "Properties" : {
                    "InstanceId" : {"Ref" : "EC2BigIPPAYG"},
                    "NetworkInterfaceId" : {"Ref" : "ENAPrivateBigIP01"},
                    "DeviceIndex" : "2"
                }
        }
    },
    "Mappings": {
        "BigIPPAYG200Mb": {
            "eu-north-1" : {"AMI" : "ami-69df5717"},
            "ap-south-1" : {"AMI" : "ami-0dbdc3876b48aa8c6"},
            "eu-west-3" : {"AMI" : "ami-0ee53ccfe910eaa4c"},
            "eu-west-2" : {"AMI" : "ami-0f8d8e09823cb6e1d"},
            "eu-west-1" : {"AMI" : "ami-003f4d39ac196b31b"},
            "ap-northeast-2" : {"AMI" : "ami-01c83fd54619542a2"},
            "ap-northeast-1" : {"AMI" : "ami-056524dc31b358988"},
            "sa-east-1" : {"AMI" : "ami-0d29d40b6b0d01b72"},
            "ca-central-1" : {"AMI" : "ami-0fbd680de4821a361"},
            "ap-southeast-1" : {"AMI" : "ami-009e368b9411ba909"},
            "ap-southeast-2" : {"AMI" : "ami-04eaeca8a0129c72d"},
            "eu-central-1" : {"AMI" : "ami-0f6ae0c1440880fae"},
            "us-east-1" : {"AMI" : "ami-08cdb240fc2f1b628"},
            "us-east-2" : {"AMI" : "ami-043ded16d331257c7"},
            "us-west-1" : {"AMI" : "ami-0fbf0d00e39f7a864"},
            "us-west-2" : {"AMI" : "ami-0e08ff376531d1647"}
        },
        "Ubuntu1804": {
            "eu-north-1": { "AMI": "ami-5e9c1520" },
            "ap-south-1": { "AMI": "ami-007d5db58754fa284" },
            "eu-west-3": { "AMI": "ami-03bca18cb3dc173c9" },
            "eu-west-2": { "AMI": "ami-07dc734dc14746eab" },
            "eu-west-1": { "AMI": "ami-08d658f84a6d84a80" },
            "ap-northeast-2": { "AMI": "ami-078e96948945fc2c9" },
            "ap-northeast-1": { "AMI": "ami-0eb48a19a8d81e20b" },
            "sa-east-1": { "AMI": "ami-09f4cd7c0b533b081" },
            "ca-central-1": { "AMI": "ami-01b60a3259250381b" },
            "ap-southeast-1": { "AMI": "ami-0dad20bd1b9c8c004" },
            "ap-southeast-2": { "AMI": "ami-0b76c3b150c6b1423" },
            "eu-central-1": { "AMI": "ami-090f10efc254eaf55" },
            "us-east-1": { "AMI": "ami-0a313d6098716f372" },
            "us-east-2": { "AMI": "ami-0c55b159cbfafe1f0" },
            "us-west-1": { "AMI": "ami-06397100adf427136" },
            "us-west-2": { "AMI": "ami-005bdb005fb00e791" }
        }
    },
    "Outputs": {
        "VPC": {
            "Description": "A reference to the created VPC",
            "Value": {
                "Ref": "VPC"
            }
        },
        "BIGIP": {
            "Description": "BIGIP Mgmt Address",
            "Value":
                {
                    "Fn::Join": [
                        "",
                        [
                            "https://",
                            { "Fn::GetAtt" : [ "EC2BigIPPAYG" , "PublicDnsName" ] }
                        ]
                    ]
                }
        },
        "JumpHost": {
            "Description": "Jump Host FQDN",
            "Value": { "Fn::GetAtt" : [ "EC2JumpHost" , "PublicDnsName" ] }
        }
    }
}
